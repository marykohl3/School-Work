Mary Kohl
Lab 1 
Script File for text commands and output in Python 3

Problem 1
In [5]: sumNeven = 0.0
   ...: sumNodd = 0.0
   ...: for n in range(0,9999):
   ...:     sumNeven += (2*n)*(2*n)
   ...:     sumNodd += (2*n+1)*(2*n+1)
   ...:     if n >9994: 
   ...:         print(n, (n)**3, (sumNodd)/n**3, (sumNeven)/n**3)
   ...:         
   ...: 
(9995, 998500749875, 1.3337335701377457, 1.3335334400566967)
(9996, 998800479936, 1.3337335300943778, 1.3335334200373494)
(9997, 999100269973, 1.3337334900590216, 1.3335334000220072)
(9998, 999400119992, 1.3337334500316749, 1.333533380010669)

In [6]: # a = 1.33 or 4/3 for sumNodd and sumNeven

In [7]: sumNeven = 0.0
   ...: sumNodd = 0.0
   ...: for n in range(0,9999):
   ...:     sumNeven += (2*n)*(2*n)
   ...:     sumNodd += (2*n+1)*(2*n+1)
   ...:     if n >9994: 
   ...:         print(n, (n)**3, (sumNodd-(4*n**3/3))/n**2, (sumNeven-(4*n**3/3))/n**2)
   ...:         
(9995, 998500749875, 4.0003668667750585, 2.0000667066900135)
(9996, 998800479936, 4.000366823400029, 2.0000666933440043)
(9997, 999100269973, 4.000366790041014, 2.0000666900080026)
(9998, 999400119992, 4.000366756688005, 2.0000666866720014)

In [8]: #b = 4, 2 for sumNodd and sumNeven respectfully

In [9]: sumNeven = 0.0
   ...: sumNodd = 0.0
   ...: for n in range(0,9999):
   ...:     sumNeven += (2*n)*(2*n)
   ...:     sumNodd += (2*n+1)*(2*n+1)
   ...:     if n >9994: 
   ...:         print(n, (n)**3, (sumNodd-(4*n**3/3)-(4*n**2))/n, (sumNeven-(4*n**3/3)-(2*n**2))/n)
   ...: 
(9995, 998500749875, 3.666833416708354, 0.6667333666833417)
(9996, 998800479936, 3.6667667066826732, 0.6666666666666666)
(9997, 999100269973, 3.6668000400120038, 0.6667000100030009)
(9998, 999400119992, 3.666833366673335, 0.6667333466693338)

In [10]: # c = 3.66 and 0.66 for sumNodd and sumN even respectfully

In [18]: sumNeven = 0.0
    ...: sumNodd = 0.0
    ...: for n in range(0, 150001):
    ...:     sumNeven += (2*n)*(2*n)
    ...:     sumNodd += (2*n+1)*(2*n+1)
    ...:     if n > 149999: 
    ...:         print(n, (n)**3, (sumNodd-(4*n**3/3)-(4*n**2)-(11*n/3)), (sumNeven-(4*n**3/3)-(2*n**
    ...: 2)-(2*n/3)))
    ...:         
(150000, 3375000000000000, 1.0, 0.0)

In [19]: # had to increase range for most accurate answer which is d = 1, 0 for sumNodd and sumNeven 
    ...: respectfully. now we know where both equations converge at for a, b, c, and d

Problem 2

In [26]: Elements = {'e0':['v0','v1','v5'],'e1':['v1','v3','v4','v5'],'e2':['v0','v2','v5']}

In [27]: Vertices = {}

In [28]: for key,values in Elements.items():
    ...:     for i in values:
    ...:          Vertices.setdefault(i,[]).append(key)
    ...:         

In [29]: print Vertices
{'v0': ['e0', 'e2'], 'v1': ['e1', 'e0'], 'v2': ['e2'], 'v3': ['e1'], 'v4': ['e1'], 'v5': ['e1', 'e0', 'e2']}

 # setdefault found from tutorials point website 

Problem 3

In [41]: count = 0

In [42]: error = 10

In [43]: err = 0.000001

In [44]: b = 25

In [45]: x = 1

In [46]: if b == 0: 
    ...:     print 0
    ...: elif b == 1:
    ...:     print 1
    ...: elif b == complex or b > 0:
    ...:     while err < abs(error) and count < 10000:
    ...:         x = 0.5 * (x + b/x)
    ...:         error = abs(x**2 - b) / abs(x)
    ...:         count += 1
    ...:     print x
    ...: else: 
    ...:     if type(x) == complex:
    ...:         x = x
    ...:     else:
    ...:         x = x * 1j
    ...:     while err < abs(error) and count < 10000:
    ...:         x = 0.5 * (x + b/x)
    ...:         error = abs(x**2 - b) / abs(x)
    ...:     print(x)
    ...:     
5.00000000005

In [47]: count = 0

In [48]: error = 10 

In [49]: err = 0.000001

In [50]: b = 47

In [51]: x = 1

In [52]: if b == 0: 
    ...:     print 0
    ...: elif b == 1:
    ...:     print 1
    ...: elif b == complex or b > 0:
    ...:     while err < abs(error) and count < 10000:
    ...:         x = 0.5 * (x + b/x)
    ...:         error = abs(x**2 - b) / abs(x)
    ...:         count += 1
    ...:     print x
    ...: else: 
    ...:     if type(x) == complex:
    ...:         x = x
    ...:     else:
    ...:         x = x * 1j
    ...:     while err < abs(error) and count < 10000:
    ...:         x = 0.5 * (x + b/x)
    ...:         error = abs(x**2 - b) / abs(x)
    ...:     print(x)
    ...:     
6.85565469378

In [53]: count = 0

In [54]: error = 0

In [55]: err = 0.000001

In [56]: b = -9

In [57]: x = 1

In [58]: if b == 0: 
    ...:     print 0
    ...: elif b == 1:
    ...:     print 1
    ...: elif b == complex or b > 0:
    ...:     while err < abs(error) and count < 10000:
    ...:         x = 0.5 * (x + b/x)
    ...:         error = abs(x**2 - b) / abs(x)
    ...:         count += 1
    ...:     print x
    ...: else: 
    ...:     if type(x) == complex:
    ...:         x = x
    ...:     else:
    ...:         x = x * 1j
    ...:     while err < abs(error) and count < 10000:
    ...:         x = 0.5 * (x + b/x)
    ...:         error = abs(x**2 - b) / abs(x)
    ...:     print(x)
    ...:     
1j

 # as shown, b can be negative and complex. a function declaration would be a more efficient version of this code so that i would not have to reset count...etc each time 
 # I made the iterations high so that there would be the most accurate result while maintaining a quick run time 
